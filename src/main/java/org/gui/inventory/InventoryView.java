/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.gui.inventory;

/**
 *
 * @author Vidal zenzano jonas :v y cristian xD
 */
import org.services.product.ProductService;
import org.services.utils.Product;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.Timer;
import javax.swing.SwingUtilities;
import java.util.ArrayList;

public class InventoryView extends javax.swing.JPanel {
    private DefaultTableModel tableModel;
    private ProductService productService;
        
    

    /**
     * Creates new form Inventory
     */
    public InventoryView() {
        initComponents();
        tableModel = (DefaultTableModel) jTable1.getModel();
        deshabilitarEdicionTabla();
        productService = new ProductService();
        cargarDatosDesdeBD();
}
// Nueva función para deshabilitar edición
private void deshabilitarEdicionTabla(){
    jTable1.setDefaultEditor(Object.class, null);
    jTable1.getTableHeader().setResizingAllowed(false);
    jTable1.getTableHeader().setReorderingAllowed(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        txt_modificar = new javax.swing.JButton();
        txt_eliminar1 = new javax.swing.JButton();
        j_buscador = new javax.swing.JPanel();
        txt_buscar = new javax.swing.JTextField();
        txt_filter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(249, 250, 251));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 730, -1));

        txt_modificar.setBackground(new java.awt.Color(135, 206, 235));
        txt_modificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_modificar.setText("Modificar");
        txt_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_modificarActionPerformed(evt);
            }
        });
        add(txt_modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 450, 120, 30));

        txt_eliminar1.setBackground(new java.awt.Color(135, 206, 235));
        txt_eliminar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_eliminar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/images/eliminar .png"))); // NOI18N
        txt_eliminar1.setText("Eliminar");
        txt_eliminar1.setMaximumSize(new java.awt.Dimension(95, 27));
        txt_eliminar1.setMinimumSize(new java.awt.Dimension(95, 27));
        txt_eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_eliminar1ActionPerformed(evt);
            }
        });
        add(txt_eliminar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 450, 120, 30));

        j_buscador.setBackground(new java.awt.Color(255, 255, 255));

        txt_buscar.setText("Buscar inventario");
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });

        txt_filter.setBackground(new java.awt.Color(135, 206, 235));
        txt_filter.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_filter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/images/filtrar (1).png"))); // NOI18N
        txt_filter.setText("Filter");
        txt_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_filterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout j_buscadorLayout = new javax.swing.GroupLayout(j_buscador);
        j_buscador.setLayout(j_buscadorLayout);
        j_buscadorLayout.setHorizontalGroup(
            j_buscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(j_buscadorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        j_buscadorLayout.setVerticalGroup(
            j_buscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(j_buscadorLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(j_buscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        add(j_buscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 670, 80));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Inventario");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", "", "", null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Codigo", "Nombre", "Precio", "Categoria", "Stock Actual", "Fecha de entrada", "Proveedor", "Estado"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 670, 290));
    }// </editor-fold>//GEN-END:initComponents

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed
        // TODO add your handling code here:
        // Método para manejar la acción del campo de búsqueda (ahora solo actúa como entrada de texto)
                                              
        // Este método solo permite ingresar el texto, no busca automáticamente.
        // La búsqueda se realizará cuando el usuario haga clic en el botón "Filtrar".
    
        //JOptionPane.showMessageDialog(this,"Funcion de busqueda no implementada.");
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void txt_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_filterActionPerformed
         String filtro = txt_buscar.getText().trim();
        
        if (filtro.isEmpty()) {
            filtrarProductos(""); // Pasamos una cadena vacía para indicar que no hay filtro
        }else {
        filtrarProductos(filtro); // Aplicar el filtro
        }

        
    }//GEN-LAST:event_txt_filterActionPerformed
private void filtrarProductos(String filtro) {
        try {
             List<Product> productosFiltrados = productService.getFilteredProducts(filtro);
               if (filtro.isEmpty()) {
            // Si el filtro está vacío, obtener todos los productos
                 productosFiltrados = productService.getAllProducts();
            } else {
            // Si hay un filtro, aplicar la búsqueda
                productosFiltrados = productService.getFilteredProducts(filtro);
            }
            tableModel.setRowCount(0); // Limpiar la tabla

            for (Product producto : productosFiltrados) {
                tableModel.addRow(new Object[]{
                    producto.getId(),
                    producto.getCode(),
                    producto.getName(),
                    producto.getUnitPrice(),
                    producto.getCategoryId(),
                    producto.getCurrentStock(),
                    producto.getMinimumStock(),
                    producto.getEntryDate(),
                    producto.getSupplierId(),
                    (producto.getCurrentStock() <= producto.getMinimumStock()) ? "Bajo stock" : "En stock"
                });
            }

            if (!filtro.isEmpty() && productosFiltrados.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron productos con el filtro ingresado.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al filtrar datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void txt_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_modificarActionPerformed
        // TODO add your handling code here:                                                                                  
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un producto para modificar.", 
            "Selección requerida", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    try {
        // Obtener los datos de la fila seleccionada
        int productId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());
        String codigo = jTable1.getValueAt(selectedRow, 1).toString();
        String nombre = jTable1.getValueAt(selectedRow, 2).toString();
        double precioActual = Double.parseDouble(jTable1.getValueAt(selectedRow, 3).toString());
        int stockActual = Integer.parseInt(jTable1.getValueAt(selectedRow, 5).toString());
        
        // Crear el panel personalizado para el diálogo
        JPanel panel = new JPanel();
        panel.setLayout(new java.awt.GridLayout(6, 2, 5, 5));
        
        // Añadir componentes al panel
        panel.add(new JLabel("Código:"));
        JTextField txtCodigo = new JTextField(codigo);
        txtCodigo.setEditable(false);
        panel.add(txtCodigo);
        
        panel.add(new JLabel("Nombre:"));
        JTextField txtNombre = new JTextField(nombre);
        txtNombre.setEditable(false);
        panel.add(txtNombre);
        
        panel.add(new JLabel("Precio actual:"));
        JTextField txtPrecio = new JTextField(String.valueOf(precioActual));
        panel.add(txtPrecio);
        
        panel.add(new JLabel("Stock actual:"));
        JTextField txtStock = new JTextField(String.valueOf(stockActual));
        panel.add(txtStock);
        
        // Mostrar el diálogo personalizado
        int result = JOptionPane.showConfirmDialog(this, panel, 
            "Modificar Producto", JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE);
            
        if (result == JOptionPane.OK_OPTION) {
            try {
                // Validar y obtener los nuevos valores
                double nuevoPrecio = Double.parseDouble(txtPrecio.getText().trim());
                int nuevoStock = Integer.parseInt(txtStock.getText().trim());
                
                if (nuevoPrecio < 0 || nuevoStock < 0) {
                    throw new NumberFormatException("Los valores no pueden ser negativos");
                }
                
                // Crear el objeto Product con los nuevos datos
                Product producto = new Product();
                producto.setId(productId);
                producto.setCode(codigo);
                producto.setName(nombre);
                producto.setUnitPrice(nuevoPrecio);
                producto.setCurrentStock(nuevoStock);
                producto.setEntryDate(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                    .format(new java.util.Date()));
                
                // Actualizar en la base de datos
                if (productService.updateProductStockAndDate(producto)) {
                    // Actualizar la tabla
                    jTable1.setValueAt(nuevoPrecio, selectedRow, 3);
                    jTable1.setValueAt(nuevoStock, selectedRow, 5);
                    JOptionPane.showMessageDialog(this, 
                        "Producto actualizado exitosamente", 
                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Recargar los datos de la tabla
                    cargarDatosDesdeBD();
                } else {
                    JOptionPane.showMessageDialog(this, 
                        "Error al actualizar el producto", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                    "Por favor ingrese valores numéricos válidos", 
                    "Error de entrada", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error al procesar la modificación: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    }//GEN-LAST:event_txt_modificarActionPerformed

    private void txt_eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_eliminar1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
     if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.");
        return;
    }
    
    // Obtener el ID del producto (asumiendo que el ID está en la primera columna)
    int productId = (int) jTable1.getValueAt(selectedRow, 0);

    // Confirmar eliminación
    int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este producto?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    
    if (confirm == JOptionPane.YES_OPTION) {
        ProductService productService = new ProductService();
        boolean success = productService.deleteProduct(productId);

         if (success) {
            JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
            tableModel.removeRow(selectedRow); // Elimina de la tabla visualmente
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_txt_eliminar1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel j_buscador;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JButton txt_eliminar1;
    private javax.swing.JButton txt_filter;
    private javax.swing.JButton txt_modificar;
    // End of variables declaration//GEN-END:variables

     private void cargarDatosDesdeBD() {
         SwingUtilities.invokeLater(() -> {
         try {
            List<Product> productos = productService.getAllProducts();
            tableModel.setRowCount(0); // Limpiar la tabla
        
            List<String> productosConBajoStock = new ArrayList<>();
        
            for (Product producto : productos) {
                tableModel.addRow(new Object[]{
                    producto.getId(),
                    producto.getCode(),
                    producto.getName(),
                    producto.getUnitPrice(),
                    producto.getCategoryId(),
                    producto.getCurrentStock(),
                    producto.getEntryDate(),
                    producto.getSupplierId(),
                    (producto.getCurrentStock() <= producto.getMinimumStock()) ? "Bajo stock" : "En stock"
                });

                if (producto.getCurrentStock() <= producto.getMinimumStock()) {
                    productosConBajoStock.add(producto.getName());
                }
            }
            
            tableModel.fireTableDataChanged();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar datos: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    });
}
         public void refreshData() {
           cargarDatosDesdeBD();
    }
}    

